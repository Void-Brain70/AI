# -*- coding: utf-8 -*-
"""Petrol_Consumption_Multivariable_Linear_Regression_With_SK-Learn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13IDPn5GFxqgd_Uyy7fxsOZhgGNYMxp0I

**Petrol_Consumption_Multivariable_Linear_Regression_With_SK-Learn**
"""

# Commented out IPython magic to ensure Python compatibility.
# Importing all required packages
import numpy as np # for numpy array
import pandas as pd # for dataframe
import matplotlib.pyplot as plt # for ploting
import seaborn as sns # for ploting 3D data
# %matplotlib inline

# import data and view data
df=pd.read_csv('/content/petrol_consumption.csv') # A simple way to store big data sets is to use CSV files
df.head() # Return the first 5 rows of the DataFrame.

# Return a tuple representing the dimensionality of the DataFrame 
df.shape

# Print a concise summary of a DataFrame
df.info()

# Pandas describe() is used to view some basic statistical details like percentile, mean, std etc.
df.describe()

sns.pairplot(df) # Plot pairwise relationships in a dataset
plt.show() # Display all open figures

# Draw a line plot with possibility of several semantic
sns.lineplot(x=df['Petrol_tax'],y=df['Petrol_Consumption'])

# We are going to use column names for creating an attribute set and label.
X=df[['Petrol_tax','Average_income','Paved_Highways','Population_Driver_licence(%)']]
y=df['Petrol_Consumption']

# Plot for Average_income VS Petrol_Consumption
plt.figure(figsize=(20, 12))
sns.regplot(x = 'Average_income', y = 'Petrol_Consumption', data = df)
plt.show()

# Plot for Average_income VS Petrol_Consumption
# Plot for Petrol_tax VS Petrol_Consumption 
plt.figure(figsize=(20, 12))
plt.subplot(2,3,2)
sns.boxplot(x = 'Average_income', y = 'Petrol_Consumption', data = df)
plt.subplot(2,3,3)
sns.boxplot(x = 'Petrol_tax', y = 'Petrol_Consumption', data = df)
plt.show()

# Dividing our data into training and test sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

# Training the Algorithm
from sklearn.linear_model import LinearRegression
reg=LinearRegression()
reg.fit(X_train,y_train)

# In case of multivariable linear regression, the regression model has to find the most optimal coefficients for all the attributes.
coeff_df = pd.DataFrame(reg.coef_, X.columns, columns=['Coefficient'])
coeff_df

# The regression model has to find the most optimal intercept for all the attributes.
int_df = pd.DataFrame(reg.intercept_, X.columns, columns=['intercept'])
int_df

# Making Predictions
y_pred=reg.predict(X_test)

# Comparing the actual output values for X_test with the predicted values
df=pd.DataFrame({'Actual':y_test, 'Predicted':y_pred})
df

# Evaluating the Algorithm
from sklearn import metrics
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))

# Predictions
y_pred=reg.predict([[9.0,3571,1976,0.525]])
y_pred

#Petrol_Consumption = M0 + M1*Petrol_tax + M2*Average_income + M3*Paved_Highways + M4*Population_Driver_licence(%) + intercept
Petrol_Consumption = (-40.016660)*9.0	+(-0.065413)*3571+(-0.004741)*1976+1341.862121*0.525+425.599332
Petrol_Consumption