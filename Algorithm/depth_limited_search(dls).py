# -*- coding: utf-8 -*-
"""Depth_Limited_Search(DLS).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pG6NQYddwfkQWIw_R1PIzwD4AktSj7q8
"""

graph = {
  'A' : ['B','C'],
  'B' : ['D', 'E'],
  'D' : ['H','I'],
  'H' : [],
  'I' : [],
  'E' : ['J','K'],
  'J' : [],
  'K' : [],
  'C' : ['F','G'],
  'F' : ['L','M'],
  'L' : [],
  'M' : [],
  'G' : ['N','O'],
  'N' : [],
  'O' : []
}

def dls(start, goal):
  depth = 0
  limit = 10
  OPEN=[]
  CLOSED=[]
  OPEN.append(start)
  while OPEN != []: # Step 2
    if depth<=limit:
      current = OPEN.pop() 
      if current == goal:
        CLOSED.append(current)
        print("Goal Node Found")
        print(CLOSED)
        return True
      else:
        CLOSED.append(current)
        lst = successors(current)
        for i in lst:
          OPEN.append(i)
          depth +=1
    else:
      print("Not found within depth limit")
      return False
  return False

def successors(city):
  return graph[city]

def test():
  start = 'A'
  goal = 'F'
  print("Starting a dls from " + start)
  print(dls(start, goal))


if __name__ == "__main__":
  test()